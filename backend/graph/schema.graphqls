type Query {
  # User Queries
  getUser(input: ID!): User!
  listUsers: [User!]!

  # Competition Queries
  getCompetition(input: ID!): Competition!
}

type Mutation {
  # User Mutations
  createUser(input: UserInput!): User!
  deleteUser(input: ID!): User!
  updateUser(input: UpdateUserInput!): User!

  # Competition Mutations
  createCompetition(input: CompetitionInput!): Competition!
}

input UserInput {
  username: String!
  hashedPassword: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  favouriteTeam: ID
}

input UpdateUserInput {
  id: ID!
  user: UserInput!
}

input CompetitionInput {
  name: String!
  startMatchday: Int!
}


# TYPES
type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  favouriteTeam: ID
}

type Competition {
  id: ID!
  name: String!
  startMatchday: Int!
  status: CompStatus!
}

enum CompStatus {
  OPEN
  IN_PROGRESS
  COMPLETE
}