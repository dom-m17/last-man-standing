// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: team.sql

package db

import (
	"context"
	"database/sql"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
  id,
  long_name, 
  short_name, 
  tla, 
  crest_url
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, long_name, short_name, tla, crest_url
`

type CreateTeamParams struct {
	ID        int32          `json:"id"`
	LongName  string         `json:"long_name"`
	ShortName string         `json:"short_name"`
	Tla       string         `json:"tla"`
	CrestUrl  sql.NullString `json:"crest_url"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam,
		arg.ID,
		arg.LongName,
		arg.ShortName,
		arg.Tla,
		arg.CrestUrl,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.LongName,
		&i.ShortName,
		&i.Tla,
		&i.CrestUrl,
	)
	return i, err
}

const getTeam = `-- name: GetTeam :one
SELECT id, long_name, short_name, tla, crest_url FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id int32) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.LongName,
		&i.ShortName,
		&i.Tla,
		&i.CrestUrl,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, long_name, short_name, tla, crest_url FROM teams
LIMIT 20
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.LongName,
			&i.ShortName,
			&i.Tla,
			&i.CrestUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
