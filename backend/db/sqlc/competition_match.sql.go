// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: competition_match.sql

package db

import (
	"context"
)

const createCompetitionMatch = `-- name: CreateCompetitionMatch :one
INSERT INTO competition_matches (
  competition_id,
  match_id
) VALUES (
  $1, $2
)
RETURNING competition_id, match_id
`

type CreateCompetitionMatchParams struct {
	CompetitionID int64 `json:"competition_id"`
	MatchID       int64 `json:"match_id"`
}

func (q *Queries) CreateCompetitionMatch(ctx context.Context, arg CreateCompetitionMatchParams) (CompetitionMatch, error) {
	row := q.db.QueryRow(ctx, createCompetitionMatch, arg.CompetitionID, arg.MatchID)
	var i CompetitionMatch
	err := row.Scan(&i.CompetitionID, &i.MatchID)
	return i, err
}

const listCompetitionMatches = `-- name: ListCompetitionMatches :many
SELECT competition_id, match_id FROM competition_matches
WHERE competition_id = $1
ORDER BY competition_id
`

func (q *Queries) ListCompetitionMatches(ctx context.Context, competitionID int64) ([]CompetitionMatch, error) {
	rows, err := q.db.Query(ctx, listCompetitionMatches, competitionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompetitionMatch{}
	for rows.Next() {
		var i CompetitionMatch
		if err := rows.Scan(&i.CompetitionID, &i.MatchID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
