// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: selection.sql

package db

import (
	"context"
)

const createSelection = `-- name: CreateSelection :one
INSERT INTO selections (
  entry_id, 
  match_id,
  team_id
) VALUES (
  $1, $2, $3
)
RETURNING id, entry_id, match_id, team_id, is_correct, created_at
`

type CreateSelectionParams struct {
	EntryID int64 `json:"entry_id"`
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) CreateSelection(ctx context.Context, arg CreateSelectionParams) (Selection, error) {
	row := q.db.QueryRowContext(ctx, createSelection, arg.EntryID, arg.MatchID, arg.TeamID)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.MatchID,
		&i.TeamID,
		&i.IsCorrect,
		&i.CreatedAt,
	)
	return i, err
}

const getSelection = `-- name: GetSelection :one
SELECT id, entry_id, match_id, team_id, is_correct, created_at FROM selections
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSelection(ctx context.Context, id int32) (Selection, error) {
	row := q.db.QueryRowContext(ctx, getSelection, id)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.MatchID,
		&i.TeamID,
		&i.IsCorrect,
		&i.CreatedAt,
	)
	return i, err
}

const listSelections = `-- name: ListSelections :many
SELECT id, entry_id, match_id, team_id, is_correct, created_at FROM selections
WHERE entry_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListSelectionsParams struct {
	EntryID int64 `json:"entry_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListSelections(ctx context.Context, arg ListSelectionsParams) ([]Selection, error) {
	rows, err := q.db.QueryContext(ctx, listSelections, arg.EntryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Selection{}
	for rows.Next() {
		var i Selection
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.MatchID,
			&i.TeamID,
			&i.IsCorrect,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
