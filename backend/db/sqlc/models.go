// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CompStatus string

const (
	CompStatusOpen       CompStatus = "open"
	CompStatusInProgress CompStatus = "in_progress"
	CompStatusComplete   CompStatus = "complete"
)

func (e *CompStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompStatus(s)
	case string:
		*e = CompStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CompStatus: %T", src)
	}
	return nil
}

type NullCompStatus struct {
	CompStatus CompStatus `json:"comp_status"`
	Valid      bool       `json:"valid"` // Valid is true if CompStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CompStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompStatus), nil
}

type EntryStatus string

const (
	EntryStatusActive     EntryStatus = "active"
	EntryStatusEliminated EntryStatus = "eliminated"
	EntryStatusWinner     EntryStatus = "winner"
)

func (e *EntryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntryStatus(s)
	case string:
		*e = EntryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EntryStatus: %T", src)
	}
	return nil
}

type NullEntryStatus struct {
	EntryStatus EntryStatus `json:"entry_status"`
	Valid       bool        `json:"valid"` // Valid is true if EntryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EntryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntryStatus), nil
}

type Competition struct {
	ID            int16              `json:"id"`
	Name          string             `json:"name"`
	StartMatchday int32              `json:"start_matchday"`
	Status        NullCompStatus     `json:"status"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

type CompetitionMatch struct {
	CompetitionID int64 `json:"competition_id"`
	MatchID       int64 `json:"match_id"`
}

type Entry struct {
	ID            int64       `json:"id"`
	UserID        int64       `json:"user_id"`
	CompetitionID int64       `json:"competition_id"`
	Status        EntryStatus `json:"status"`
}

type Match struct {
	ID       int32 `json:"id"`
	HomeTeam int64 `json:"home_team"`
	AwayTeam int64 `json:"away_team"`
	// between 1 and 38
	Matchday    int32            `json:"matchday"`
	MatchDate   pgtype.Timestamp `json:"match_date"`
	HomeGoals   pgtype.Int4      `json:"home_goals"`
	AwayGoals   pgtype.Int4      `json:"away_goals"`
	HasFinished bool             `json:"has_finished"`
}

type Selection struct {
	ID        int32              `json:"id"`
	EntryID   int64              `json:"entry_id"`
	MatchID   int64              `json:"match_id"`
	TeamID    int64              `json:"team_id"`
	IsCorrect pgtype.Bool        `json:"is_correct"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Team struct {
	ID        int32       `json:"id"`
	LongName  string      `json:"long_name"`
	ShortName string      `json:"short_name"`
	Tla       string      `json:"tla"`
	CrestUrl  pgtype.Text `json:"crest_url"`
}

type User struct {
	ID             int32              `json:"id"`
	Username       string             `json:"username"`
	HashedPassword string             `json:"hashed_password"`
	FirstName      string             `json:"first_name"`
	LastName       string             `json:"last_name"`
	Email          string             `json:"email"`
	PhoneNumber    pgtype.Text        `json:"phone_number"`
	FavouriteTeam  pgtype.Int8        `json:"favourite_team"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}
