// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: competition.sql

package db

import (
	"context"
)

const createCompetition = `-- name: CreateCompetition :one
INSERT INTO competitions (
  name, 
  start_matchday, 
  status
) VALUES (
  $1, $2, $3
)
RETURNING id, name, start_matchday, status, created_at
`

type CreateCompetitionParams struct {
	Name          string         `json:"name"`
	StartMatchday int32          `json:"start_matchday"`
	Status        NullCompStatus `json:"status"`
}

func (q *Queries) CreateCompetition(ctx context.Context, arg CreateCompetitionParams) (Competition, error) {
	row := q.db.QueryRow(ctx, createCompetition, arg.Name, arg.StartMatchday, arg.Status)
	var i Competition
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartMatchday,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getCompetition = `-- name: GetCompetition :one
SELECT id, name, start_matchday, status, created_at FROM competitions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompetition(ctx context.Context, id int16) (Competition, error) {
	row := q.db.QueryRow(ctx, getCompetition, id)
	var i Competition
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartMatchday,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
