package graphresolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/dom-m17/lms/backend/internal/subgraph/graphconverters"
	graphmodels "github.com/dom-m17/lms/backend/internal/subgraph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graphmodels.CreateUserInput) (*graphmodels.User, error) {
	user, err := r.UserService.CreateUser(ctx, input)
	if err != nil {
		return &graphmodels.User{}, fmt.Errorf("creating user: %w", err)
	}

	return graphconverters.ConvertModelUserToGraphUser(*user), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input string) (*graphmodels.User, error) {
	user, err := r.UserService.DeleteUser(ctx, input)
	if err != nil {
		return &graphmodels.User{}, fmt.Errorf("getting user: %w", err)
	}

	return graphconverters.ConvertModelUserToGraphUser(*user), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input graphmodels.UpdateUserInput) (*graphmodels.User, error) {
	user, err := r.UserService.UpdateUser(ctx, input)
	if err != nil {
		return &graphmodels.User{}, fmt.Errorf("updating user: %w", err)
	}

	return graphconverters.ConvertModelUserToGraphUser(*user), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, input string) (*graphmodels.User, error) {
	user, err := r.UserService.GetUser(ctx, input)
	if err != nil {
		return &graphmodels.User{}, fmt.Errorf("getting user: %w", err)
	}

	return graphconverters.ConvertModelUserToGraphUser(*user), nil
}

// ListUsers is the resolver for the ListUsers field.
func (r *queryResolver) ListUsers(ctx context.Context) ([]*graphmodels.User, error) {
	users, err := r.UserService.ListUsers(ctx)
	if err != nil {
		return []*graphmodels.User{}, fmt.Errorf("listing users: %w", err)
	}

	return graphconverters.ConvertModelUsersToGraphUsers(users), nil
}
