package graphresolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/dom-m17/lms/backend/internal/subgraph"
	"github.com/dom-m17/lms/backend/internal/subgraph/graphconverters"
	graphmodels "github.com/dom-m17/lms/backend/internal/subgraph/model"
)

// HomeTeam is the resolver for the homeTeam field.
func (r *matchResolver) HomeTeam(ctx context.Context, obj *graphmodels.Match) (*graphmodels.Team, error) {
	team, err := r.TeamService.GetTeam(ctx, obj.HomeTeam.ID)
	if err != nil {
		return nil, fmt.Errorf("getting home team: %w", err)
	}

	return graphconverters.ConvertModelTeamToGraphTeam(team), nil
}

// AwayTeam is the resolver for the awayTeam field.
func (r *matchResolver) AwayTeam(ctx context.Context, obj *graphmodels.Match) (*graphmodels.Team, error) {
	team, err := r.TeamService.GetTeam(ctx, obj.AwayTeam.ID)
	if err != nil {
		return nil, fmt.Errorf("getting away team: %w", err)
	}

	return graphconverters.ConvertModelTeamToGraphTeam(team), nil
}

// Match returns subgraph.MatchResolver implementation.
func (r *Resolver) Match() subgraph.MatchResolver { return &matchResolver{r} }

type matchResolver struct{ *Resolver }
