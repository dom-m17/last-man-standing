// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: match.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (
    home_team_id, away_team_id, matchday, match_date
) VALUES (
    $1, $2, $3, $4
) 
RETURNING id, home_team_id, away_team_id, matchday, match_date, home_goals, away_goals, has_finished
`

type CreateMatchParams struct {
	HomeTeamID string    `json:"home_team_id"`
	AwayTeamID string    `json:"away_team_id"`
	Matchday   int32     `json:"matchday"`
	MatchDate  time.Time `json:"match_date"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRowContext(ctx, createMatch,
		arg.HomeTeamID,
		arg.AwayTeamID,
		arg.Matchday,
		arg.MatchDate,
	)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.Matchday,
		&i.MatchDate,
		&i.HomeGoals,
		&i.AwayGoals,
		&i.HasFinished,
	)
	return i, err
}

const getMatch = `-- name: GetMatch :one
SELECT id, home_team_id, away_team_id, matchday, match_date, home_goals, away_goals, has_finished FROM matches
WHERE id = $1
`

func (q *Queries) GetMatch(ctx context.Context, id string) (Match, error) {
	row := q.db.QueryRowContext(ctx, getMatch, id)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.Matchday,
		&i.MatchDate,
		&i.HomeGoals,
		&i.AwayGoals,
		&i.HasFinished,
	)
	return i, err
}

const getMatchesByMatchday = `-- name: GetMatchesByMatchday :many
SELECT 
    id AS match_id,
    home_team_id AS home_team_id,
    away_team_id AS away_team_id,
    matchday AS matchday,
    match_date AS match_date,
    home_goals AS home_goals,
    away_goals AS away_goals,
    has_finished AS has_finished
FROM matches
WHERE matchday = $1
`

type GetMatchesByMatchdayRow struct {
	MatchID     string        `json:"match_id"`
	HomeTeamID  string        `json:"home_team_id"`
	AwayTeamID  string        `json:"away_team_id"`
	Matchday    int32         `json:"matchday"`
	MatchDate   time.Time     `json:"match_date"`
	HomeGoals   sql.NullInt32 `json:"home_goals"`
	AwayGoals   sql.NullInt32 `json:"away_goals"`
	HasFinished bool          `json:"has_finished"`
}

func (q *Queries) GetMatchesByMatchday(ctx context.Context, matchday int32) ([]GetMatchesByMatchdayRow, error) {
	rows, err := q.db.QueryContext(ctx, getMatchesByMatchday, matchday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMatchesByMatchdayRow{}
	for rows.Next() {
		var i GetMatchesByMatchdayRow
		if err := rows.Scan(
			&i.MatchID,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.Matchday,
			&i.MatchDate,
			&i.HomeGoals,
			&i.AwayGoals,
			&i.HasFinished,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMatch = `-- name: UpdateMatch :one
UPDATE matches 
SET
    matchday = $2,
    match_date = $3,
    home_goals = $4,
    away_goals = $5,
    has_finished = "TRUE"
WHERE id = $1
RETURNING id, home_team_id, away_team_id, matchday, match_date, home_goals, away_goals, has_finished
`

type UpdateMatchParams struct {
	ID        string        `json:"id"`
	Matchday  int32         `json:"matchday"`
	MatchDate time.Time     `json:"match_date"`
	HomeGoals sql.NullInt32 `json:"home_goals"`
	AwayGoals sql.NullInt32 `json:"away_goals"`
}

func (q *Queries) UpdateMatch(ctx context.Context, arg UpdateMatchParams) (Match, error) {
	row := q.db.QueryRowContext(ctx, updateMatch,
		arg.ID,
		arg.Matchday,
		arg.MatchDate,
		arg.HomeGoals,
		arg.AwayGoals,
	)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.Matchday,
		&i.MatchDate,
		&i.HomeGoals,
		&i.AwayGoals,
		&i.HasFinished,
	)
	return i, err
}
