// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    user_id, competition_id
) VALUES (
    $1, $2
)
RETURNING id, user_id, competition_id, status, created_at, updated_at
`

type CreateEntryParams struct {
	UserID        string `json:"user_id"`
	CompetitionID string `json:"competition_id"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.UserID, arg.CompetitionID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompetitionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, user_id, competition_id, status, created_at, updated_at FROM entries
WHERE id = $1
`

func (q *Queries) GetEntry(ctx context.Context, id string) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompetitionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
SET 
    status = $2
WHERE id = $1
RETURNING id, user_id, competition_id, status, created_at, updated_at
`

type UpdateEntryParams struct {
	ID     string      `json:"id"`
	Status EntryStatus `json:"status"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.ID, arg.Status)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompetitionID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
