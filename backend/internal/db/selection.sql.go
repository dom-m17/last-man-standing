// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: selection.sql

package db

import (
	"context"
	"database/sql"
)

const changeSelection = `-- name: ChangeSelection :one
UPDATE selections 
SET
    match_id = $2,
    team_id = $3
WHERE id = $1
RETURNING id, entry_id, match_id, team_id, is_correct, created_at, updated_at
`

type ChangeSelectionParams struct {
	ID      string `json:"id"`
	MatchID int64  `json:"match_id"`
	TeamID  int64  `json:"team_id"`
}

func (q *Queries) ChangeSelection(ctx context.Context, arg ChangeSelectionParams) (Selection, error) {
	row := q.db.QueryRowContext(ctx, changeSelection, arg.ID, arg.MatchID, arg.TeamID)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.MatchID,
		&i.TeamID,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSelection = `-- name: CreateSelection :one
INSERT INTO selections (
    entry_id, match_id, team_id
) VALUES (
    $1, $2, $3
)
RETURNING id, entry_id, match_id, team_id, is_correct, created_at, updated_at
`

type CreateSelectionParams struct {
	EntryID string `json:"entry_id"`
	MatchID int64  `json:"match_id"`
	TeamID  int64  `json:"team_id"`
}

func (q *Queries) CreateSelection(ctx context.Context, arg CreateSelectionParams) (Selection, error) {
	row := q.db.QueryRowContext(ctx, createSelection, arg.EntryID, arg.MatchID, arg.TeamID)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.MatchID,
		&i.TeamID,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSelection = `-- name: GetSelection :one
SELECT id, entry_id, match_id, team_id, is_correct, created_at, updated_at FROM selections
WHERE id = $1
`

func (q *Queries) GetSelection(ctx context.Context, id string) (Selection, error) {
	row := q.db.QueryRowContext(ctx, getSelection, id)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.MatchID,
		&i.TeamID,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSelection = `-- name: UpdateSelection :one
UPDATE selections
SET 
    is_correct = $2
WHERE id = $1
RETURNING id, entry_id, match_id, team_id, is_correct, created_at, updated_at
`

type UpdateSelectionParams struct {
	ID        string       `json:"id"`
	IsCorrect sql.NullBool `json:"is_correct"`
}

func (q *Queries) UpdateSelection(ctx context.Context, arg UpdateSelectionParams) (Selection, error) {
	row := q.db.QueryRowContext(ctx, updateSelection, arg.ID, arg.IsCorrect)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.MatchID,
		&i.TeamID,
		&i.IsCorrect,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
