// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/dom-m17/lms/backend/internal/models"
)

type CompStatus string

const (
	CompStatusOPEN       CompStatus = "OPEN"
	CompStatusINPROGRESS CompStatus = "IN_PROGRESS"
	CompStatusCOMPLETED  CompStatus = "COMPLETED"
)

func (e *CompStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompStatus(s)
	case string:
		*e = CompStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CompStatus: %T", src)
	}
	return nil
}

type NullCompStatus struct {
	CompStatus CompStatus `json:"comp_status"`
	Valid      bool       `json:"valid"` // Valid is true if CompStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CompStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompStatus), nil
}

type EntryStatus string

const (
	EntryStatusACTIVE     EntryStatus = "ACTIVE"
	EntryStatusELIMINATED EntryStatus = "ELIMINATED"
	EntryStatusWINNER     EntryStatus = "WINNER"
)

func (e *EntryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntryStatus(s)
	case string:
		*e = EntryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EntryStatus: %T", src)
	}
	return nil
}

type NullEntryStatus struct {
	EntryStatus EntryStatus `json:"entry_status"`
	Valid       bool        `json:"valid"` // Valid is true if EntryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EntryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntryStatus), nil
}

type MatchStatus string

const (
	MatchStatusFINISHED  MatchStatus = "FINISHED"
	MatchStatusINPLAY    MatchStatus = "IN_PLAY"
	MatchStatusSCHEDULED MatchStatus = "SCHEDULED"
	MatchStatusTIMED     MatchStatus = "TIMED"
)

func (e *MatchStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MatchStatus(s)
	case string:
		*e = MatchStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MatchStatus: %T", src)
	}
	return nil
}

type NullMatchStatus struct {
	MatchStatus MatchStatus `json:"match_status"`
	Valid       bool        `json:"valid"` // Valid is true if MatchStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMatchStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MatchStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MatchStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMatchStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MatchStatus), nil
}

type Competition struct {
	ID            string            `json:"id"`
	Name          string            `json:"name"`
	StartMatchday int32             `json:"start_matchday"`
	Status        models.CompStatus `json:"status"`
	CreatedAt     time.Time         `json:"created_at"`
	UpdatedAt     time.Time         `json:"updated_at"`
}

type CompetitionMatch struct {
	CompetitionID string `json:"competition_id"`
	MatchID       string `json:"match_id"`
}

type Entry struct {
	ID            string             `json:"id"`
	UserID        string             `json:"user_id"`
	CompetitionID string             `json:"competition_id"`
	Status        models.EntryStatus `json:"status"`
	CreatedAt     time.Time          `json:"created_at"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

type Match struct {
	ID         string `json:"id"`
	HomeTeamID string `json:"home_team_id"`
	AwayTeamID string `json:"away_team_id"`
	// between 1 and 38
	Matchday  int32              `json:"matchday"`
	MatchDate time.Time          `json:"match_date"`
	HomeGoals sql.NullInt32      `json:"home_goals"`
	AwayGoals sql.NullInt32      `json:"away_goals"`
	Status    models.MatchStatus `json:"status"`
}

type Round struct {
	ID            string    `json:"id"`
	RoundNumber   string    `json:"round_number"`
	CompetitionID string    `json:"competition_id"`
	Matchday      int32     `json:"matchday"`
	EntryDeadline time.Time `json:"entry_deadline"`
}

type Selection struct {
	ID        string       `json:"id"`
	EntryID   string       `json:"entry_id"`
	RoundID   string       `json:"round_id"`
	MatchID   string       `json:"match_id"`
	TeamID    string       `json:"team_id"`
	IsCorrect sql.NullBool `json:"is_correct"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
}

type Team struct {
	ID        string         `json:"id"`
	LongName  string         `json:"long_name"`
	ShortName string         `json:"short_name"`
	Tla       string         `json:"tla"`
	CrestUrl  sql.NullString `json:"crest_url"`
}

type User struct {
	ID              string         `json:"id"`
	Username        string         `json:"username"`
	HashedPassword  string         `json:"hashed_password"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           string         `json:"email"`
	PhoneNumber     sql.NullString `json:"phone_number"`
	DateOfBirth     time.Time      `json:"date_of_birth"`
	FavouriteTeamID sql.NullString `json:"favourite_team_id"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}
